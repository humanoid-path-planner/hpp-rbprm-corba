// Copyright (c) 2015 CNRS
// Author: Steve Tonneau
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_RBPRM_CORBA_BUILDER_IDL
# define HPP_RBPRM_CORBA_BUILDER_IDL

# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  module rbprm {
  interface RbprmBuilder
  {
    /// Create a Device for the ROM of the robot
    /// This function can be called several times to include several ROMs (one for each limb)
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param romRobotName the name of the robot range of motion.
    ///  Load robot model
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotRomModel (in string romRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);


    /// Create a RbprmDevice for the root of the robot

    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotCompleteModel (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Create a RbprmFullBody object
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param trunkRobotName the name of the robot trunk used for collision.
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadFullBodyRobot (in string trunkRobotName, in string rootJointType,
             in string packageName, in string modelName,
             in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Set Rom constraints for the configuration shooter
    /// a configuration will only be valid if all roms indicated
    /// are colliding with the environment.
    /// If no roms are indicated, a configuration will be valid if any rom
    /// is colliding with the environment.
    ///
    void setFilter (in Names_t roms)
      raises (Error);

    /// Set Rom surface constraints for the configuration shooter
    /// a Rom configuration will only be valid if it collides with a surface
    /// that forms a given affordance (support, lean, etc.)
    /// \param romName name of the ROM object for which the filter is set.
    /// \param affordances a list of affordances accepted for 
		/// validation of given Rom
    void setAffordanceFilter(in string romName, in Names_t affordances) raises (Error);

    /// Get contact points of collision between the ROM of a given limb and its contact surface.
    /// Returns a list of points forming a convex hull around all found contact points.
    /// \param limbname the name of the limb for which the contact points are found.
    /// \param stateId  the index of the rbprm-state with the right configuration.
    floatSeqSeq getDebugContactPoints (in string libname,in unsigned short stateId) raises (Error);

    /// Get points along a circle or ellipse shape. Returns a list of points that may be used for
    /// visualisation.
    /// \param radius or radii of shape along which points will be computed.
    /// \param trafo the world pose of the shape centroid used to transform the computed points into
    /// world frame.
    floatSeqSeq getPointsOnCurve (in floatSeq radiiIn,
            in floatSeq trafo) raises (Error);
    /// Get elliptic or circular contact area corresponding to contact surface and reachability of 
    /// a given limb. Returns radius or radii of approximated shape and the pose of its centroid. In
    /// case of an elliptic shape, the rotation takes into account the angle of the ellipse in the contact
    /// plane as well. The rotation in the contact plane is zero when the major axis of the ellipse lies along
    /// the global x-axis.
    /// \param limbname the name of the limb for which the approximation is done.
    /// \param ellipse a boolean value specifying the shape of the approximation.
    /// \param transform the world pose of the ellipse/circle centroid.
    /// \param stateId the index of the rbprm-state with the right configuration.
    floatSeq getReachableContactArea (in string libname, in boolean ellipse, out floatSeq transform,
      in unsigned short stateId) raises (Error);


    /// Get a 2D circular or elliptic approximation of the end effector contact area
    /// of a given limb. Returns the radius or radii of the approximated shape.
    /// \param limbname the name of the limb for which the approximation is done.
    /// \param stateId the index of the rbprm-state with the right configuration.
    /// \param ellipse a boolean value specifying the shape of the approximation.
    /// If ellipse == false, the approximation will have a circular shape.
    floatSeq getApproximatedEffectorDebug (in string limbname, in unsigned short stateId, in boolean ellipse,
            out floatSeq transform) raises (Error);

    /// Sets limits on robot orientation, described according to Euler's ZYX rotation order
    ///
    /// \param limitszyx 6D vector with the lower and upperBound for each rotation axis in sequence
    /// expressed in gradients
    /// [z_inf, z_sup, y_inf, y_sup, x_inf, x_sup]
    void boundSO3(in floatSeq limitszyx) raises (Error);

    /// Get Sample configuration by its id
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return dofArray Array of degrees of freedom corresponding to the current configuration of the robot
    /// , to which the desired limb configuration has been assigned.
    floatSeq getSampleConfig(in string sampleName, in unsigned short sampleId) raises (Error);


    /// Get the end effector position of a given limb configuration
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return world position of the limb end effector given the current robot configuration and the
    /// and the selected sample
    floatSeq getSamplePosition(in string sampleName, in unsigned short sampleId) raises (Error);

    /// Get the end effector position of a given limb configuration
    /// \param limbName name of the limb from which to retrieve a sample
    /// \return number of samples generated for the limb
    unsigned short getNumSamples(in string limbName) raises (Error);

    /// Get the number of octree nodes for a limb database
    /// \param limbName name of the limb from which to retrieve octree number
    /// \return ids of the nodes in the octree
    floatSeq getOctreeNodeIds(in string limbName) raises (Error);

    /// Get the sample value for a given analysis
    /// \param limbName name of the limb from which to retrieve a sample
    /// \param valueName name of the analytic measure desired
    /// \param sampleId id of the considered sample
    /// \return the value computed for the given sample and analytics
    double getSampleValue(in string limbName, in string valueName, in unsigned short sampleId) raises (Error);

    /// Generate all possible contact in a given configuration
    /// \param dofArray initial configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq generateContacts(in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// Given a configuration and a limb, returns the id of all samples potentially in contact with the
    /// environment, ordered by their efficiency
    /// \param name name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getContactSamplesIds(in string name, in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// get Ids of limb in an octree cell
    /// \param name name of the considered limb
    /// \param octreeNodeId considered configuration of the robot
    /// \return list of ids in the cell
    floatSeq getSamplesIdsInOctreeNode(in string name, in double octreeNodeId) raises (Error);

    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param id user given name of the new limb
    /// \param limb robot joint corresponding to the root of the limb (ex a shoulder or ankle joint)
    /// \param effector robot joint corresponding to the effector of the limb (ex a hand or foot joint)
    /// \param offset contact point of the effector, expressed as an offset from the joint root
    /// \param normal normal vector to consider for contact creation. For instance for a foot, typically
    /// normal is aligned with the -z vertical axis, to create a contact with the plant of the robot
    /// \param x width of the rectangle surface contact of the effector
    /// \param y length of the rectangle surface contact of the effector
    /// \param samples number of samples to generate for the limb (a typical value is 10000)
    /// \param heuristicName heuristic used to bias sample selection
    /// \param resolution resolution of the octree used to store the samples (a typical value is 0.01 meters)
    /// \param contactType whether the contact is punctual ("_3_DOF") or surfacic ("_6_DOF")
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    void addLimb(in string id, in string limb, in string effector, in floatSeq offset, in floatSeq normal,
                 in double x, in double y, in unsigned short samples, in string heuristicName,
                 in double resolution, in string contactType,  in double disableEffectorCollision) raises (Error);

    /// Specifies a subchain of the robot as a limb, which can be used to create contacts.
    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param databasepath filepath to the database
    /// \param id user given name of the new limb
    /// \param heuristicName heuristic used to bias sample selection
    /// \param loadValues whether other values computed for the limb database should be loaded
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    void addLimbDatabase(in string databasepath, in string id, in string heuristicName, in double loadValues,
                         in double disableEffectorCollision) raises (Error);

    /// Set the start state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray start configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setStartState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);


    /// Set the end state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray end configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setEndState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    floatSeqSeq interpolate(in double timestep, in double path, in double robustnessTreshold) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    floatSeqSeq interpolateConfigs(in floatSeqSeq configs, in double robustnessTreshold) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states are computed using the current active steering method, and considered to be valid
    /// in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    void interpolateBetweenStates(in double state1, in double state2, in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param path index of the path considered for the generation
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    void interpolateBetweenStatesFromPath(in double state1, in double state2,  in  unsigned short path, in unsigned short numOptimizations) raises (Error);

    /// Saves the last computed states by the function interpolate in a filename.
    /// Raises an error if interpolate has not been called, or the file could not be opened.
    /// \param filename name of the file used to save the contacts.
    void saveComputedStates(in string filename) raises (Error);

    /// Saves a sample database into a file
    /// Raises an ifthe file could not be opened.
    /// \param limbname name of the limb used to save the samples.
    /// \param filename name of the file used to save the samples.
    void saveLimbDatabase(in string limbname, in string filename) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeqSeq getOctreeBoxes(in string limbname, in floatSeq dofArray) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getOctreeBox(in string limbname, in double sampleId) raises (Error);

    /// returns octree transform for a given robot configuration
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return size 7 position + quaternion of the octree root
    floatSeq getOctreeTransform(in string limbname, in floatSeq dofArray) raises (Error);

    /// returns octree transform for a given robot configuration
    /// \param config configuration tested on the robot
    /// \param contacts name of the limbs in contact
    /// \param robustnessTreshold robustness treshold used
    /// \return whether the configuration is quasi-statically balanced
    short isConfigBalanced(in floatSeq config, in Names_t contacts,  in double robustnessTreshold) raises (Error);

    /// run and store an analysis on all limb databases
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    void runSampleAnalysis(in string analysis, in double isstatic) raises (Error);

    /// run and store an analysis on a limb database
    /// \param limbname name of the limb to perform the analysis to
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    /// \return min and max values obtained
    floatSeq runLimbSampleAnalysis(in string limbname, in string analysis, in double isstatic) raises (Error);

  }; // interface Robot
  }; // module rbprm
  }; // module corbaserver
}; // module hpp

#endif // HPP_RBPRM_CORBA_BUILDER_IDL
