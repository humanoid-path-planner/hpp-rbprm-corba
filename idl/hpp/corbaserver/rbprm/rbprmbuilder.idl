// Copyright (c) 2015 CNRS
// Author: Steve Tonneau
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_RBPRM_CORBA_BUILDER_IDL
# define HPP_RBPRM_CORBA_BUILDER_IDL

# include <hpp/common.idl>

module hpp
{
  typedef sequence<floatSeqSeq> floatSeqSeqSeq;
  module corbaserver {
  module rbprm {

  interface RbprmBuilder
  {
    /// Create a Device for the ROM of the robot
    /// This function can be called several times to include several ROMs (one for each limb)
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param robotName the name of the robot range of motion,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param urdfName name of the urdf file. It may contain
    ///        "file://", or "package://" prefixes.
    ///
    void loadRobotRomModel (in string robotName, in string rootJointType,
    in string urdfName)
      raises (Error);


    /// Create a RbprmDevice for the root of the robot

    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    /// \param robotName the name of the robot trunk used for collision,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param urdfName name of the urdf file. It may contain
    ///        "file://", or "package://" prefixes.
    /// \param srdfName name of the srdf file. It may contain
    ///        "file://", or "package://" prefixes.
    ///
    void loadRobotCompleteModel (in string robotName, in string rootJointType,
    in string urdfName, in string srdfName)
      raises (Error);

    ///  Load fullbody robot model
    ///
    /// Create a RbprmFullBody object
    /// The device automatically has an anchor joint called "base_joint" as
    /// root joint.
    ///
    /// \param robotName Name of the robot that is constructed,
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param urdfName name of the urdf file. It may contain
    ///        "file://", or "package://" prefixes.
    /// \param srdfName name of the srdf file. It may contain
    ///        "file://", or "package://" prefixes.
    ///
    void loadFullBodyRobot (in string robotName, in string rootJointType,
       in string urdfName, in string srdfName, in string selectedProblem)
      raises (Error);

		/// Create a RbprmFullBody object
		/// The device automatically has an anchor joint called "base_joint" as
		/// root joint.
		void loadFullBodyRobotFromExistingRobot ()
			raises (Error);

    void selectFullBody (in string name) raises (Error);

    /// set a boolean in rbprmFullBody
    /// if true, the acceleration doesn't account for the stability check
    void setStaticStability(in boolean staticStability)
      raises (Error);

    /// set a reference configuration in fullBody
    void setReferenceConfig(in floatSeq referenceConfig)
      raises (Error);

    /// set the weights used when computing a postural task
    void setPostureWeights(in floatSeq postureWeights)
      raises (Error);

    /// If true, optimize the orientation of all the newly created contact using a postural task
    void usePosturalTaskContactCreation(in boolean use)
      raises (Error);

    /// set a reference position of the end effector for the given ROM
    void setReferenceEndEffector(in string romName, in floatSeq ref)
      raises (Error);

    /// Set Rom constraints for the configuration shooter
    /// a configuration will only be valid if all roms indicated
    /// are colliding with the environment.
    /// If no roms are indicated, a configuration will be valid if any rom
    /// is colliding with the environment.
    ///
    void setFilter (in Names_t roms)
      raises (Error);

    /// Called if several problem solvers are used
    /// is colliding with the environment.
    ///
    void initNewProblemSolver ()
      raises (Error);

    /// Set Rom surface constraints for the configuration shooter
    /// a Rom configuration will only be valid it collides with a surface
    /// that forms a given affordance (support, lean, etc.)
    /// \param affordances a list of affordances accepted for
		/// validation of given Rom
		///
    void setAffordanceFilter(in string romName, in Names_t affordances) raises (Error);

    /// Sets limits on robot orientation, described according to Euler's ZYX rotation order
    ///
    /// \param limitszyx 6D vector with the lower and upperBound for each rotation axis in sequence
    /// expressed in gradients
    /// [z_inf, z_sup, y_inf, y_sup, x_inf, x_sup]
    void boundSO3(in floatSeq limitszyx) raises (Error);

    /// Project a state into a COM
    ///
    /// \param stateId target state
    /// \param com target com
    double projectStateToCOM(in unsigned short stateId,  in floatSeq com, in  unsigned short max_num_sample) raises (Error);

    /// Clone a state
    ///
    /// \param stateId target state
    /// \return stateId of the cloned state
    short cloneState(in unsigned short stateId) raises (Error);

    /// Project a state into a given root position and orientation
    ///
    /// \param stateId target state
    /// \param root the root configuration (size 7)
    /// \param offset specific point to be projected in root frame. If different than 0 root orientation is ignored
    double projectStateToRoot(in unsigned short stateId,  in floatSeq root, in floatSeq offset) raises (Error);


    /// Project a state into a COM
    ///
    /// \param stateId target state
    /// \param com target com
    double setConfigAtState(in unsigned short stateId,  in floatSeq config) raises (Error);


    /// Create a state and push it to the state array
    ///
    /// \param q configuration
    /// \param names list of effectors in contact
    /// \return stateId
    short createState(in floatSeq configuration, in Names_t contactLimbs) raises (Error);

    /// Get Sample configuration by its id
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return dofArray Array of degrees of freedom corresponding to the current configuration of the robot
    /// , to which the desired limb configuration has been assigned.
    floatSeq getSampleConfig(in string sampleName, in unsigned long sampleId) raises (Error);


    /// Get the end effector position of a given limb configuration
    /// \param sampleName name of the limb from which to retrieve a sample
    /// \param sampleId id of the desired samples
    /// \return world position of the limb end effector given the current robot configuration and the
    /// and the selected sample
    floatSeq getSamplePosition(in string sampleName, in unsigned long sampleId) raises (Error);

    /// Get the end effector position for a given configuration, assuming z normal
    /// \param limbName name of the limb from which to retrieve a sample
    /// \param dofArray configuration of the robot
    /// \return world position of the limb end effector given the current robot configuration.
    /// array of size 4, where each entry is the position of a corner of the contact surface
    floatSeqSeq getEffectorPosition(in string limbName, in floatSeq dofArray) raises (Error);

    /// Get the end effector position of a given limb configuration
    /// \param limbName name of the limb from which to retrieve a sample
    /// \return number of samples generated for the limb
    unsigned short getNumSamples(in string limbName) raises (Error);

    /// Get the number of octree nodes for a limb database
    /// \param limbName name of the limb from which to retrieve octree number
    /// \return ids of the nodes in the octree
    floatSeq getOctreeNodeIds(in string limbName) raises (Error);

    /// Get the sample value for a given analysis
    /// \param limbName name of the limb from which to retrieve a sample
    /// \param valueName name of the analytic measure desired
    /// \param sampleId id of the considered sample
    /// \return the value computed for the given sample and analytics
    double getSampleValue(in string limbName, in string valueName, in unsigned long sampleId) raises (Error);

    /// compute the distance between all effectors replaced between two states
    /// does not account for contact not present in both states
    /// \param state1 from state
    /// \param state2 destination state
    /// \return the value computed for the given sample and analytics
    double getEffectorDistance(in unsigned short state1, in unsigned short state2) raises (Error);

    /// Generate all possible contact in a given configuration
    /// \param dofArray initial configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq generateContacts(in floatSeq dofArray, in floatSeq direction, in floatSeq acceleration, in double robustnessThreshold) raises (Error);

    /// Generate all possible contact in a given configuration and add the state in fullBody
    /// \param dofArray initial configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return the Id of the new state
    short generateStateInContact(in floatSeq dofArray, in floatSeq direction, in floatSeq acceleration, in double robustnessThreshold) raises (Error);

    /// Generate an autocollision free configuration with limbs in contact with the ground
    /// \param contactLimbs name of the limbs to project in contact
    /// \return a sampled contact configuration
    floatSeq generateGroundContact(in Names_t contactLimbs) raises (Error);

    /// Given a configuration and a limb, returns the id of all samples potentially in contact with the
    /// environment, ordered by their efficiency
    /// \param name name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getContactSamplesIds(in string name, in floatSeq dofArray, in floatSeq direction) raises (Error);

    /// Given a configuration and a limb, returns the id of all samples potentially in contact with the
    /// environment, ordered by their efficiency
    /// \param name name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \param direction desired direction of motion for the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeqSeq getContactSamplesProjected(in string name, in floatSeq dofArray, in floatSeq direction,
    in unsigned short numSamples) raises (Error);

    /// Given a contact state and a limb, tries to generate a new contact, and returns the id of the new State if successful
    /// \param currentState Id of the considered state
    /// \param name name of the limb used to create a contact
    /// \param direction desired direction of motion for the robot
    /// \return id of the new contact state if successful, -1 otherwise
    short generateContactState(in unsigned short currentState, in string name, in floatSeq direction) raises (Error);

    /// get Ids of limb in an octree cell
    /// \param name name of the considered limb
    /// \param octreeNodeId considered configuration of the robot
    /// \return list of ids in the cell
    floatSeq getSamplesIdsInOctreeNode(in string name, in double octreeNodeId) raises (Error);

    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param id user given name of the new limb
    /// \param limb robot joint corresponding to the root of the limb (ex a shoulder or ankle joint)
    /// \param effector robot joint corresponding to the effector of the limb (ex a hand or foot joint)
    /// \param offset contact point of the effector, expressed as an offset from the joint root
    /// \param normal normal vector to consider for contact creation. For instance for a foot, typically
    /// normal is aligned with the -z vertical axis, to create a contact with the plant of the robot
    /// \param x half width of the rectangle surface contact of the effector
    /// \param y half length of the rectangle surface contact of the effector
    /// \param samples number of samples to generate for the limb (a typical value is 10000)
    /// \param heuristicName heuristic used to bias sample selection
    /// \param resolution resolution of the octree used to store the samples (a typical value is 0.01 meters)
    /// \param contactType whether the contact is punctual ("_3_DOF") or surfacic ("_6_DOF")
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    /// \param limbOffset the offset between the limb joint and it's link
    void addLimb(in string id, in string limb, in string effector, in floatSeq offset, in floatSeq normal,
                 in double x, in double y, in unsigned long samples, in string heuristicName,
                 in double resolution, in string contactType,  in double disableEffectorCollision,
                 in double grasp,in floatSeq limbOffset,
                 in string kinematicConstraintsPath, in double kinematicConstraintsMin) raises (Error);

    /// Add a limb not used for contact generation
    /// \param id user given name of the new limb
    /// \param limb robot joint corresponding to the root of the limb (ex a shoulder or ankle joint)
    /// \param effector robot joint corresponding to the effector of the limb (ex a hand or foot joint)
    /// \param samples number of samples to generate for the limb (a typical value is 10000)
    void addNonContactingLimb(in string id, in string limb, in string effector, in unsigned long samples) raises (Error);

    /// Specifies a subchain of the robot as a limb, which can be used to create contacts.
    /// A limb must consist in a simple kinematic chain, where every node has only one child
    /// \param databasepath filepath to the database
    /// \param id user given name of the new limb
    /// \param heuristicName heuristic used to bias sample selection
    /// \param loadValues whether other values computed for the limb database should be loaded
    /// \param disableEffectorCollision whether collision detection should be disabled for the end effector bones
    void addLimbDatabase(in string databasepath, in string id, in string heuristicName, in double loadValues,
                         in double disableEffectorCollision,in double grasp) raises (Error);

    /// Set the start state of a contact generation problem
    /// \param dofArray start configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setStartState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Set the start state of a contact generation problem
    /// \param stateId : the id of the state, in fullBody
    void setStartStateId(in unsigned short stateId) raises (Error);

    /// Set the end state of a contact generation problem
    /// \param stateId : the id of the state, in fullBody
    void setEndStateId(in unsigned short stateId) raises (Error);

    /// Compute effector contact points and normals for a given configuration
    /// in local coordinates
    /// \param dofArray configuration of the robot
    /// \param limbName ids of the limb in contact
    floatSeq computeContactForConfig(in floatSeq dofArray, in string limbName) raises (Error);

    /// Set the end state of a contact generation problem
    /// environment, ordered by their efficiency
    /// \param dofArray end configuration of the robot
    /// \param contactLimbs ids of the limb in contact for the state
    void setEndState(in floatSeq dofArray, in Names_t contactLimbs) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state, the next one, and the intermediate between them.
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return list of 2 or 3 lists of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPoints(in unsigned short stateId) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state, the next one, and the intermediate between them.
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return list of 2 or 3 lists of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPointsForLimb(in unsigned short stateId, in string limbname) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return list of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPointsAtStateForLimb(in unsigned short stateId, in unsigned short isIntermediate, in string limbname) raises (Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// the position of the contact center and the normal
    /// \param stateId normalized step for generation along the path (ie the path has a length of 1).
    /// \return 2 3D vector : the first is the position the second is the normal
    floatSeqSeq computeCenterOfContactAtStateForLimb(in unsigned short cId,in  unsigned short isIntermediate, in string limbName) raises(Error);

    /// Provided a discrete contact sequence has already been computed, computes
    /// all the contact positions and normals for a given state
    /// \param stateId iD of the considered state
    /// \param isIntermediate whether the intermediate state should be considerred rather than this one
    /// \return list of 6d vectors [pox, poy, posz, nprmalx, normaly, normalz]
    floatSeqSeq computeContactPointsAtState(in unsigned short stateId, in unsigned short isIntermediate) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    /// \param filterStates If different than 0, the resulting state list will be filtered to remove unnecessary states
    /// \param testReachability : if true, check each contact transition with our reachability criterion
    /// \param quasiStatic : if True, use our reachability criterion with the quasiStatic constraint
    floatSeqSeq interpolate(in double timestep, in double path, in double robustnessTreshold, in unsigned short filterStates, in boolean testReachability, in boolean quasiStatic, in boolean erasePreviousStates) raises (Error);

    /// Provided a path has already been computed, interpolates it and generates the statically stable
    /// constact configurations along it. setStartState and setEndState must have been called prior
    /// to this function. If these conditions are not met an error is raised.
    /// \param timestep normalized step for generation along the path (ie the path has a length of 1).
    /// \param path path computed.
    /// \param robustnessTreshold minimum value of the static equilibrium robustness criterion required to accept the configuration (0 by default).
    /// \param filterStates If different than 0, the resulting state list will be filtered to remove unnecessary states
    /// \param testReachability : if true, check each contact transition with our reachability criterion
    /// \param quasiStatic : if True, use our reachability criterion with the quasiStatic constraint
    /// \param erasePreviousStates : if True, the method override the current state list in fullBody, otherwise it append the results
    floatSeqSeq interpolateConfigs(in floatSeqSeq configs, in double robustnessTreshold, in unsigned short filterStates,in boolean testReachability, in boolean quasiStatic, in boolean erasePreviousStates) raises (Error);


    /// returns the CWC of the robot at a given state
    ///
    /// \param stateId The considered state
    /// \param friction The friction coefficient
    /// \return H matrix, such that H w <= h. h is added as the last column
    floatSeqSeq getContactCone(in unsigned short stateId, in double friction) raises (Error);

    /// returns the CWC of the robot between two states
    ///
    /// \param stateId The considered state
    /// \return H matrix, such that H w <= h. h is added as the last column
    floatSeqSeq getContactIntermediateCone(in unsigned short stateId, in double friction) raises (Error);

    /// Create a path for the root given
    /// a set of 3d key points
    /// The path is composed of n+1 linear interpolations
    /// between the n positions.
    /// The rotation is linearly interpolated as well,
    /// between a start and a goal rotation. The resulting path
    /// is added to the problem solver
    /// \param positions array of positions
    /// \param q1 quaternion of 1st rotation
    /// \param q2 quaternion of 2nd rotation
    /// \return id of the root path computed
    short generateRootPath(in floatSeqSeq rootPositions, in floatSeq q1, in floatSeq q2) raises (Error);

    /// Create a com trajectory given list of positions, velocities and accelerations
    /// accelerations list contains one less element because it does not have an initial state.
    /// a set of 3d key points
    /// The path is composed of n+1 integrations
    /// between the n positions.
    /// The resulting path
    /// is added to the problem solver
    /// \param positions array of positions
    /// \param velocities array of velocities
    /// \param accelerations array of accelerations
    /// \param dt time between two points
    /// \return id of the root path computed
    short generateComTraj(in floatSeqSeq positions, in floatSeqSeq velocities, in floatSeqSeq accelerations, in double dt) raises (Error);

		/// Create a linear path given list of positions
		/// The path is composed of n+1 integrations
		/// between the n positions.
		/// The resulting path
		/// is added to the problem solver
		/// \param positions array of positions
		/// \return id of the root path computed
		short straightPath(in floatSeqSeq positions) raises (Error);

		/// Create a trajectory corresponding to a bezier curve.
		/// The coefficients give the order of the spline
		/// \param coefficients array of positions
		/// \return id of the path computed
		short generateCurveTraj(in floatSeqSeq coefficients) raises (Error);

		/// Create a trajectory corresponding to a bezier curve.
		/// The coefficients give the order of the spline
		/// \param coefficients array of positions
		/// \param partitions array of positions
		/// \return id of the path computed
		short generateCurveTrajParts(in floatSeqSeq coefficients, in floatSeq partitions) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states are computed using the current active steering method, and considered to be valid
    /// in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short limbRRT(in unsigned short state1, in unsigned short state2, in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the root and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param path index of the path considered for the generation
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short limbRRTFromRootPath(in unsigned short state1, in unsigned short state2,  in  unsigned short path, in unsigned short numOptimizations) raises (Error);

		/// Linear interpolation of many configurations into a path
		/// \param configs list of configurations
		/// \return id of the root path computed
		short configToPath(in  floatSeqSeq configs) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of second state.
    /// \param comPath index of the path considered of the com path
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    short comRRT(in unsigned short state1, in unsigned short state2,  in  unsigned short comPath, in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do need to be consecutive.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq comRRTFromPos(in unsigned short state1,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between three indicated states. The states do not need to be consecutive.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of end state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq comRRTFromPosBetweenState(in unsigned short state1,in unsigned short state2,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between three indicated states. The states do not need to be consecutive.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param state2 index of end state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRTFromPosBetweenState(in unsigned short state1,in unsigned short state2,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRT(in unsigned short state1,
                        in  unsigned short comTraj1,
                        in  unsigned short comTraj2,
                        in  unsigned short comTraj3,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states need to be consecutive with no contact variation between them
    /// (the free limbs can move, but there should be no contact creation/break)
    /// \param state1 index of the first state
    /// \param state2 index of the second state
    /// \param rootPositions1 com positions to track
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRTOnePhase(in unsigned short state1, in unsigned short state2,
                        in  unsigned short comTraj,
                        in unsigned short numOptimizations) raises (Error);

    /// Provided a path has already been computed and interpolated, generate an array of bezier curves,
    /// with varying weightRRT (see effector-rrt.cc::fitBezier)
    /// \param state1 index of the first state
    /// \param state2 index of the second state
    /// \param rootPositions1 com positions to track
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeqSeq generateEffectorBezierArray(in unsigned short state1, in unsigned short state2,
                        in  unsigned short comTraj,
                        in unsigned short numOptimizations) raises (Error);


    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states need to be consecutive with no contact variation between them
    /// (the free limbs can move, but there should be no contact creation/break)
    /// \param state1 index of the first state
    /// \param state2 index of the second state
    /// \param rootPositions1 com positions to track
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq comRRTOnePhase(in unsigned short state1, in unsigned short state2,
                        in  unsigned short comTraj,
                        in unsigned short numOptimizations) raises (Error);



    /// Provided a path has already been computed and interpolated, generate a continuous path
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the states do not exist
    /// The path of the COM of thr robot and limbs not considered by the contact transitions between
    /// two states is assumed to be already computed, and registered in the solver under the id specified by the user.
    /// It must be valid in the sense of the active PathValidation.
    /// \param state1 index of first state.
    /// \param rootPositions1 com positions to track for 1st phase
    /// \param rootPositions1 com positions to track for 2nd phase
    /// \param rootPositions1 com positions to track for 3rd phase
    /// \param numOptimizations Number of iterations of the shortcut algorithm to apply between each states
    /// \return id of the root path computed
    floatSeq effectorRRTFromPath(in unsigned short state1, in  unsigned short refPath,
                                    in double path_from, in double path_to,
                                    in  unsigned short comTraj1,
                                    in  unsigned short comTraj2,
                                    in  unsigned short comTraj3,
                                    in unsigned short numOptimizations,
                                    in Names_t trackedEffectors) raises (Error);



    /// compute and add a trajectory for the end effector between the 2 states
    /// represented as a bezier curve.
    /// Do not check the kinematic feasability of this trajectory
    /// \param state1 index of first state.
    /// \param state2 index of end state.
    /// \param rootPositions com positions to track
    short generateEndEffectorBezier(in unsigned short state1,in unsigned short state2,
                        in  unsigned short comTraj) raises (Error);

    /// Project a given state into a given COM position
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the state does not exist.
    /// \param state index of first state.
    /// \param targetCom 3D vector for the com position
    /// \param max_num_sample number of samples that can be used at worst before failing
    /// \return projected configuration
    floatSeq projectToCom(in unsigned short state, in floatSeq targetCom, in  unsigned short max_num_sample) raises (Error);

    /// Retrieve the configuration at a given state
    /// between two indicated states. The states do not need to be consecutive, but increasing in Id.
    /// Will fail if the index of the state does not exist.
    /// \param state index of first state.
    /// \return projected configuration
    floatSeq getConfigAtState(in unsigned short state) raises (Error);

    /// \param limb name of the limb for which the request aplies
    /// \param state1 current state considered
    /// \return whether the limb is in contact at this state
    short isLimbInContact(in string limbname, in unsigned short state1) raises (Error);

    /// Is limb in contact during the motion from the current state to the next one
    /// \param limb name of the limb for which the request aplies
    /// \param state1 current state considered
    /// \return whether the limb is in contact at this state
    short isLimbInContactIntermediary(in string limbname, in unsigned short state1) raises (Error);

    /// Generate intermediary state
    /// \param state1 initial state considered
    /// \param state2 target state considered
    /// \return whether the limb is in contact at this state
    short computeIntermediary(in unsigned short state1, in unsigned short state2) raises (Error);

    /// Compute the number of computed states
    /// \return the number of computed states
    short getNumStates() raises (Error);

    /// Saves the last computed states by the function interpolate in a filename.
    /// Raises an error if interpolate has not been called, or the file could not be opened.
    /// \param filename name of the file used to save the contacts.
    void saveComputedStates(in string filename) raises (Error);

    /// Saves a sample database into a file
    /// Raises an ifthe file could not be opened.
    /// \param limbname name of the limb used to save the samples.
    /// \param filename name of the file used to save the samples.
    void saveLimbDatabase(in string limbname, in string filename) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeqSeq getOctreeBoxes(in string limbname, in floatSeq dofArray) raises (Error);

    /// returns the size and transforms of all boxes of the octree for a limb
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return transformed configuration for which all possible contacts have been created
    floatSeq getOctreeBox(in string limbname, in double sampleId) raises (Error);

    /// returns octree transform for a given robot configuration
    /// \param limbname name of the considered limb
    /// \param dofArray considered configuration of the robot
    /// \return size 7 position + quaternion of the octree root
    floatSeq getOctreeTransform(in string limbname, in floatSeq dofArray) raises (Error);

    /// returns whether a state is in static equilibrium
    /// \param state id of the state
    double isStateBalanced(in unsigned short state) raises (Error);

    /// returns octree transform for a given robot configuration
    /// \param config configuration tested on the robot
    /// \param contacts name of the limbs in contact
    /// \param robustnessTreshold robustness treshold used
    /// \param CoM optional, if specified use this CoM position instead of the one computed from the configuration
    /// \return whether the configuration is quasi-statically balanced
    short isConfigBalanced(in floatSeq config, in Names_t contacts,  in double robustnessTreshold,in floatSeq CoM) raises (Error);

    /// run and store an analysis on all limb databases
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    void runSampleAnalysis(in string analysis, in double isstatic) raises (Error);

    /// run and store an analysis on a limb database
    /// \param limbname name of the limb to perform the analysis to
    /// \param analysis name of the analysis existing if analysis ="all",
    /// all tests are run.
    /// \param isstatic 1 is becomes new static value of database, 0 otherwise
    /// \return min and max values obtained
    floatSeq runLimbSampleAnalysis(in string limbname, in string analysis, in double isstatic) raises (Error);

    // call the heuristic function on each limb for the given configuration
    floatSeq evaluateConfig(in floatSeq configuration, in floatSeq direction) raises (Error);


    /// if the preprocessor variable PROFILE is active
    /// dump the profiling data into a logFile
    /// \param logFile name of the file where to dump the profiling data
    void dumpProfile(in string logFile) raises (Error);

	/// return the time at the given state index
	/// \param stateId index of the state
	double getTimeAtState(in unsigned short stateId) raises (Error);

	/// return the contacts variation between two states
	/// \param stateIdFrom : index of the first state
	/// \param stateIdTo : index of the second state
    Names_t getContactsVariations(in unsigned short stateIdFrom,in unsigned short stateIdTo) raises (Error);


    /// For a given limb, returns the names of all the contact surfaces in collisions with the limb's reachable workspace
    /// \param configuration : root configuration
    /// \param limbName : name of the considered limb
    Names_t getCollidingObstacleAtConfig(in floatSeq configuration,in string limbName) raises (Error);

    /// For a given limb, return all the intersections between the limb reachable workspace and a contact surface
    /// \param configuration : root configuration
    /// \param limbName : name of the considered limb
    floatSeqSeq getContactSurfacesAtConfig(in floatSeq configuration,in string limbName) raises (Error);

    /// return a list of all the limbs names
    Names_t getAllLimbsNames() raises (Error);
    /// tries to add a new contact to the state
    /// if the limb is already in contact, replace the
    /// previous contact. Only considers kinematic limitations.
    /// collision and equilibrium are NOT considered.
    /// \param state State considered
    /// \param limbName name of the considered limb to create contact with
    /// \param p 3d position of the point
    /// \param n 3d normal of the contact location center
    /// \param max_num_sample number of times it will try to randomly sample a configuration before failing
    /// \param lockOtherJoints : if True, the values of all the joints exepct the ones of 'limbName' are constrained to be constant.
    ///                           This only affect the first projection, if max_num_sample > 0 and the first projection was unsuccessfull, the parameter is ignored
    /// \param rotation : desired rotation of the end-effector in contact, expressed as Quaternion (x,y,z,w). If different from zero, the normal is ignored. Otherwise the rotation is automatically computed from the normal (with one axis of freedom)
    /// \return (success,NState) whether the creation was successful, as well as the new state
    short addNewContact(in unsigned short stateId, in string limbName, in floatSeq position, in floatSeq normal, in unsigned short max_num_sample, in boolean lockOtherJoints,in floatSeq rotation) raises (Error);

    /// removes a contact from the state
    /// if the limb is not already in contact, does nothing
    /// \param state State considered
    /// \param limbName name of the considered limb to create contact with
    /// \return stateId of the state without the contact
    short removeContact(in unsigned short stateId, in string limbName) raises (Error);


    /// Computes the closest projection matrix that will bring a limb's effector
    /// from its current configuration to a specified location
    /// \param limbname name of the considered limb
    /// \param configuration considered configuration of the robot
    /// \param p target position
    /// \param n target normal
    /// \return 7D Transform of effector in contact (position + quaternion)
    floatSeq computeTargetTransform(in string limbname, in floatSeq configuration, in floatSeq p, in floatSeq n) raises (Error);

    /// Return the names of all the effector for which a trajectory have been computed for a given path index.
    ///  \param pathId : index of the path, the same index as the wholeBody path stored in problem-solver
    ///  \return the list of all the end-effector (joint names) for which a trajectory have been defined
    Names_t getEffectorsTrajectoriesNames(in unsigned short pathId)raises (Error);

    /// Return the waypoints of the bezier curve for a given pathIndex and effector name
    ///  \param pathId : index of the path, the same index as the wholeBody path stored in problem-solver
    ///  \param effectorName : the name of the desired effector (Joint name)
    ///  \return A list with the length of the curve at the first index
    ///  and then the waypoints of the bezier curve followed by this end effector
    ///  Throw an error if there is no trajectory computed for the given id/name
    floatSeqSeqSeq getEffectorTrajectoryWaypoints(in unsigned short pathId,in string effectorName) raises (Error);

    /// Return the waypoints of the bezier curve at given index
    /// \param pathId the path index
    /// \return a list of lenght degree+ 2 : the first item is the time of the curve, the others are the waypoints
    floatSeqSeq getPathAsBezier(in unsigned short pathId)raises (Error);


    boolean toggleNonContactingLimb(in string limbname)raises (Error);

    boolean areKinematicsConstraintsVerified(in floatSeq point)raises (Error);

    boolean areKinematicsConstraintsVerifiedForState(in unsigned short stateFrom,in floatSeq point)raises (Error);

    floatSeq isReachableFromState(in unsigned short stateFrom, in unsigned short stateTo, in boolean useIntermediateState)raises (Error);

    floatSeq isDynamicallyReachableFromState(in unsigned short stateFrom, in unsigned short stateTo,in boolean addPathPerPhase, in floatSeq timings,in short numPointsPerPhase)raises (Error);


  }; // interface Robot
  }; // module rbprm
  }; // module corbaserver
}; // module hpp

#endif // HPP_RBPRM_CORBA_BUILDER_IDL
